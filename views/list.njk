{% extends 'layout.njk' %}

{% block css %}
    {{ super() }}

    <style>
        .advancedInfo, .modalInstanceInfo-extraInfo {
            display: none;
        }
    </style>
{% endblock %}

{% block main %}
    <div class="row mt-3">
        <div class="col-md-3">
            <div class="card mb-3">
                <div class="card-block text-center">
                    <a href="/" class="btn btn-primary">OPEN WIZARD</a>
                </div>
            </div>

            <div id="card-filters" class="card mb-3">
                <div class="card-block">
                    <p id="filters"></p>
                </div>
            </div>
        </div>

        <div class="col-md-9">
            <div class="card">
                <ul id="list-instances" class="list-group list-group-flush"></ul>
                <div class="card-block" id="loading-instances">
                    <i style="display: block;" class="fa fa-refresh fa-spin fa-2x fa-fw mx-auto"></i>
                </div>
                <div class="card-block text-center" id="load-more-instances" style="display: none;">
                    <a onclick="loadMoreInstances();">Load more</a>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="modalInstanceInfo" tabindex="-1" role="dialog" aria-labelledby="modalInstanceInfoLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalInstanceInfoLabel"></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p class="advancedInfo">
                        <nobr>Uptime <span class="badge badge-success" style="vertical-align:middle;" id="modalInstanceInfo-uptime"></span></nobr><br />

                        <nobr>HTTPS <span class="badge badge-success" style="vertical-align:middle;" id="modalInstanceInfo-https"></span></nobr>
                        <nobr>Observatory <span class="badge badge-success" style="vertical-align:middle;" id="modalInstanceInfo-obs"></span></nobr>
                        <nobr>IPv6 <span class="badge" style="vertical-align:middle;" id="modalInstanceInfo-ipv6"></span></nobr>
                    </p>

                    <p>
                        <nobr>Users <span class="badge badge-info" style="vertical-align:middle;" id="modalInstanceInfo-users"></span></nobr>
                        <nobr>Statuses <span class="badge badge-info" style="vertical-align:middle;" id="modalInstanceInfo-statuses"></span></nobr>
                        <nobr class="advancedInfo">Connections <span class="badge badge-info" style="vertical-align:middle;" id="modalInstanceInfo-connections"></span></nobr>
                    </p>

                    <p class="modalInstanceInfo-extraInfo">
                        <b>Languages: </b><span id="modalInstanceInfo-languages"></span>
                    </p>

                    <div class="card modalInstanceInfo-extraInfo">
                        <div class="card-block">
                            <p class="card-text" id="modalInstanceInfo-description"></p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <a id="modalInstanceInfo-btn-go" class="btn btn-primary">Go to instance</a>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block scripts %}
    {{ super() }}

    <script type="text/javascript" src="/js/showdown.min.js"></script>

    <script type="text/javascript">
        var languages = null, countries = null, prohibitedContent = null, instancesData = {}, instancesArray = null;
        var advancedMode = false;
        var markdown = new showdown.Converter();

        let filters = {};

        $('#modalInstanceInfo').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var instanceName = button.data('instance');

            var modal = $(this);
            modal.find('.modal-title').text(instanceName);

            let instance = instancesData[instanceName];

            modal.find('#modalInstanceInfo-uptime').text((instance.uptime * 100).toFixed(3) + '%');

            modal.find('#modalInstanceInfo-https').text(instance.https_rank);
            modal.find('#modalInstanceInfo-obs').text(instance.obs_rank);

            var ipv6 = modal.find('#modalInstanceInfo-ipv6');
            if(instance.ipv6) {
                ipv6.text('Yes');
                ipv6.addClass('badge-success');
                ipv6.removeClass('badge-danger');
            } else {
                ipv6.text('No');
                ipv6.addClass('badge-danger');
                ipv6.removeClass('badge-success');
            }

            modal.find('#modalInstanceInfo-users').text(instance.users);
            modal.find('#modalInstanceInfo-statuses').text(instance.statuses);
            modal.find('#modalInstanceInfo-connections').text(instance.connections);

            if(instance.infos) {
                $('.modalInstanceInfo-extraInfo').show();

                modal.find('#modalInstanceInfo-description').html(markdown.makeHtml(escapeHtml(instance.infos.fullDescription)));

                let textL = '';
                instance.infos.languages.forEach((language) => {
                    if(textL.length > 0)
                        textL += ', ';

                    textL += getLanguage(languages, language).name[0];
                });
                modal.find('#modalInstanceInfo-languages').html(textL);
            }

            modal.find('#modalInstanceInfo-btn-go').attr('href', 'https://' + instanceName);
        });

        $(function() {
            if(window.location.hash) {
                let params = window.location.hash.substr(1).split(';');

                for(let param of params) {
                    let param_a = param.split('=');
                    let key = param_a[0];
                    let value = param_a[1];

                    if(value) {
                        if (key === 'l') {
                            filters['languages'] = value.split(',');
                        } else if (key === 'ac') {
                            filters['allowedContent'] = value.split(',');
                        } else if (key === 'pc') {
                            filters['prohibitedContent'] = value.split(',');
                        }
                    }
                }
            }

            $.get('/list-utils.json').done(function(data) {
                languages = data.languages;
                countries = data.countries;
                prohibitedContent = data.prohibitedContent;

                let html = '<span class="text-left"><small>';

                if(data.query.languages && data.query.languages.length > 0) {
                    html += '<b>LANGUAGES:</b> ';

                    let first = true;
                    data.query.languages.forEach((code) => {
                        let language = getLanguage(languages, code);

                        if (!first)
                            html += ', ';

                        html += language.name[0];
                        first = false;
                    });

                    html += '<br />';
                }

                if(data.query.user_count) {
                    html += '<b>MAX USERS:</b> ' + data.query.user_count + '<br />';
                }

                if(data.query.moderation) {
                    if (data.query.moderation.allowed && data.query.moderation.allowed.length > 0) {
                        html += '<b>ALLOWED:</b> ';

                        let first = true;
                        data.query.moderation.allowed.forEach((code) => {
                            let content = prohibitedContent[code];

                            if (!first)
                                html += ', ';

                            html += content;
                            first = false;
                        });

                        html += '<br>';
                    }

                    if (data.query.moderation.prohibited && data.query.moderation.prohibited.length > 0) {
                        html += '<b>PROHIBITED:</b> ';

                        let first = true;
                        data.query.moderation.prohibited.forEach((code) => {
                            let content = prohibitedContent[code];

                            if (!first)
                                html += ', ';

                            html += content;
                            first = false;
                        });

                        html += '<br>';
                    }
                }

                if(data.query.version === 'master') {
                    html += '<b>VERSION:</b> Latest<br />';
                } else if(data.query.version === 'stable') {
                    html += '<b>VERSION:</b> Stable<br />';
                }

                html += '</small></span>';

                $('#wizard-criteria').show();
                $('#wizard-criteria').append(html);

                $('#loading-wizard').hide();
                showInstances(instancesArray.splice(0, 50));
                $('#loading-instances').hide();
            }).fail(function() {
                advancedMode = true;
                $('.advancedInfo').show();
                $('#card-wizard-criteria').hide();

                $.get('/list.json').done(function(data) {
                    languages = data.languages;
                    countries = data.countries;
                    prohibitedContent = data.prohibitedContent;
                    instancesArray = data.instances;

                    showInstances(instancesArray.splice(0, 50));
                    $('#loading-instances').hide();
                });
            });
        });

        function showInstances(instances) {
            const list = $('#list-instances');
            list.empty();

            appendInstances(instances);
        }

        function appendInstances(instances) {
            const list = $('#list-instances');

            instances.forEach(function(instance) {
                instancesData[instance.name] = instance;
                list.append(generateInstanceHtml(instance));
            });

            if(instancesArray.length > 0) {
                $('#load-more-instances').show();
            } else {
                $('#load-more-instances').hide();
            }
        }

        function loadMoreInstances() {
            $('#load-more-instances').hide();
            $('#loading-instances').show();
            appendInstances(instancesArray.splice(0, 50));
            $('#loading-instances').hide();
        }

        function generateInstanceHtml(instance) {
            let html = '<a href="" data-toggle="modal" data-target="#modalInstanceInfo" data-instance="' + instance.name + '" class="list-group-item list-group-item-action flex-column align-items-start">' +
                '<div class="d-flex w-100 justify-content-between">' +
                '<h5 class="mb-1">' + instance.name +
                ' <small class="text-muted">' +
                ((instance.infos && instance.infos.theme) ? escapeHtml(instance.infos.theme) : 'Generalistic') +
                '</small>' +
                '</h5>' +
                '<small>' + instance.users + '&nbsp;users&nbsp;&bull;&nbsp;' + instance.statuses + '&nbsp;statuses' + (advancedMode ? '&nbsp;&bull;&nbsp;' + instance.connections + '&nbsp;connections' : '') + '</small>' +
                '</div>';

            if(instance.infos) {
                html += '<p class="mb-1">'
                    + escapeHtml(instance.infos.shortDescription)
                    + '</p>';
            }

            html += '</a>';

            return html;
        }

        function getLanguage(languages, code) {
            for(let language of languages) {
                if(language.iso639_1 === code)
                    return language;
            }

            return null;
        }

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
    </script>
{% endblock %}